import argparse
import glob
import logging
import os
import re


logger = logging.getLogger(__name__)


def main():
    rnn_lm_test_metrics = []
    log_paths = glob.glob(os.path.join(args.logs_dir, args.checkpoint_prefix) +
                          "*.txt")
    for log_path in log_paths:
        regex = r"\d+.\d+$"
        test_ppl = None
        test_accuracy = None

        if not args.adversarial:
            # Iterate through the file and get the line that has "test ppl"
            # or "top1 test accuracy"
            with open(log_path) as log_file:
                for line in log_file:
                    if "test ppl" in line:
                        test_ppl = list(re.finditer(regex, line))[-1].group()
                    if "test accuracy" in line and "adversarial" not in line:
                        test_accuracy = list(
                            re.finditer(regex, line))[-1].group()
        else:
            # Iterate through the file and get the last line that has
            # "adversarial ppl" or "adversarial test accuracy"
            with open(log_path) as log_file:
                for line in log_file:
                    if "adversarial ppl" in line:
                        test_ppl = list(re.finditer(regex, line))[-1].group()
                    if "adversarial test accuracy" in line:
                        test_accuracy = list(
                            re.finditer(regex, line))[-1].group()

        dependency_length = log_path.split(
            args.checkpoint_prefix)[1].split(".txt")[0]
        rnn_lm_test_metrics.append((dependency_length,
                                    test_ppl, test_accuracy))
    model_metrics = sorted(rnn_lm_test_metrics, key=lambda k: int(k[0]))

    for results_tuple in model_metrics:
        print("\t".join([str(x) for x in results_tuple]))


if __name__ == "__main__":
    logging.basicConfig(format="%(asctime)s - %(levelname)s "
                        "- %(name)s - %(message)s",
                        level=logging.INFO)
    parser = argparse.ArgumentParser(
        description=("Print statistics about the best models created "
                     "from looped runs of train_rnn_lm.py"))
    parser.add_argument("--logs-dir", required=True,
                        help=("Path to the folder with the models, "
                              "where each model is a subfolder."))
    parser.add_argument("--checkpoint-prefix", required=True,
                        help=("The string that prefixes each checkpoint"))
    parser.add_argument("--adversarial",
                        help=("Print the adversarial scores "
                              "instead of the task test scores."),
                        action="store_true")

    args = parser.parse_args()
    main()
